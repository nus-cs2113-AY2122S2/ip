package storage;

import task.Deadline;
import task.Event;
import task.Task;
import task.Todo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class Storage {
    private String filePath;

    /**
     * Creates a new instance of Storage.
     * <p>
     * The storage object stores the file path for future use of writing to it during the progranmme.
     * </p>
     * @param filePath file path of text document used for data reading and writing.
     */
    public Storage(String filePath) {
        this.filePath = filePath;
    }

    //@@author quitejasper-reused
    //Reused from https://github.com/FaliciaOng/ip/blob/master/src/main/java/Duke.java
    //with minor modifications

    /**
     * This method loads the data stored in the text document,
     * using the file path stored in the storage object. If there is no such file,
     * a new file will be created in the directory specified.
     * @return the task list generated by the text document.
     * @throws IOException if there is no file found.
     */
    public ArrayList<Task> load() throws IOException {
        ArrayList<Task> taskList = new ArrayList<>();

        File file = new File(filePath);
        if (!file.exists()) {
            file.getParentFile().mkdirs();
            file.createNewFile();
            throw new IOException();
        }

        Scanner scFile = new Scanner(file);

        while (scFile.hasNext()) {
            String fileLine = scFile.nextLine();
            String[] splittedFileLine = fileLine.split("\\|");
            boolean isCompleted = splittedFileLine[1].trim().equals("1");

            Task task = null;

            switch (splittedFileLine[0].trim()) {
            case "T":
                task = new Todo(splittedFileLine[2].trim());
                break;
            case "E":
                task = new Event(splittedFileLine[2].trim(), splittedFileLine[3].trim());
                break;
            case "D":
                task = new Deadline(splittedFileLine[2].trim(), splittedFileLine[3].trim());
                break;
            }

            if (task != null) {
                if (isCompleted) {
                    task.markAsDone();
                }
                taskList.add(task);
            } else {
                System.out.println("--not valid--");
            }
        }
        return taskList;
    }

    /**
     * This method is used every time there is an update to the task list,
     * be it addition, deletion, or change in status of the tasks.
     * @param taskList the latest task list used to update the text document.
     */
    public void updateAndSave(ArrayList<Task> taskList) {
        try {
            File file = new File(filePath);
            FileWriter fileWriter = new FileWriter(file);
            for (Task a : taskList) {
                fileWriter.write(a.toFileString() + System.lineSeparator());
            }
            fileWriter.close();
        } catch (IOException error) {
            System.out.println(error.getMessage());
        }
    }
    //@@author
}
